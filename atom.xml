<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yanjielk.github.io</id>
    <title>Yanjielk</title>
    <updated>2020-04-24T06:20:03.283Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yanjielk.github.io"/>
    <link rel="self" href="https://yanjielk.github.io/atom.xml"/>
    <subtitle>XXXXXXXXXXXXXXXXX</subtitle>
    <logo>https://yanjielk.github.io/images/avatar.png</logo>
    <icon>https://yanjielk.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Yanjielk</rights>
    <entry>
        <title type="html"><![CDATA[离线安装elasticdump及命令]]></title>
        <id>https://yanjielk.github.io/post/chi-xian-an-zhuang-elasticdump/</id>
        <link href="https://yanjielk.github.io/post/chi-xian-an-zhuang-elasticdump/">
        </link>
        <updated>2020-04-24T06:02:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一离线安装elasticdump">一.离线安装elasticdump</h2>
<p>准备工作:<br>
下载压缩包: 链接: https://pan.baidu.com/s/1VD--fwspgUCJ_7n_kHNlzw 提取码: 3zsh</p>
<p>1.下载两个压缩包<br>
node-v10.16.0-linux-x64.tar.xz 存放到/opt 目录下<br>
npm-cache.tar 存放到/root 目录下<br>
2.在/opt目录下，解压node-v10.16.0-linux-x64.tar.xz包</p>
<pre><code>tar -xvf node-v10.16.0-linux-x64.tar.xz
</code></pre>
<p>3.配置环境变量，</p>
<pre><code>vim /etc/profile
export NODE_HOME=/opt/node-v10.16.0-linux-x64
export PATH=$PATH:$NODE_HOME/bin

source /etc/profile
</code></pre>
<p>4.确认是否安装成功</p>
<pre><code>node -v  
npm -v
</code></pre>
<p>5.解压 npm-cache.tar的包，</p>
<pre><code>cd /root
tar -xvf npm-cache.tar

ll -h 检查是否存在.npm目录
</code></pre>
<p>6.执行安装elasticdump命令</p>
<pre><code> cd /opt/node-v10.16.0-linux-x64/lib
 npm install --cache /root/.npm --optional --cache-min 99999999 --shrinkwrap false elasticdump
</code></pre>
<p>7.检查状态</p>
<pre><code>执行命令 
elasticdump --help
</code></pre>
<h3 id="二基础命令es数据迁移">二.基础命令(es数据迁移)</h3>
<h4 id="1-数据迁移">1. 数据迁移</h4>
<pre><code>input:配置es输出数据IP地址
output:配置es接收数据IP地址
数据迁移： 
'#拷贝analyzer分词
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=http://localhost1:9200/my_index \
  --type=analyzer

'#拷贝映射
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=http://localhost1:9200/my_index \
  --type=mapping
  
  '#拷贝数据
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=http://localhost1:9200/my_index \
  --type=data
</code></pre>
<h4 id="2-保存本地方法">2. 保存本地方法</h4>
<pre><code># 备份索引数据到文件里:
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=/data/my_index_mapping.json \
  --type=mapping
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=/data/my_index.json \
  --type=data

# 把一个查询结果备份到文件中
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=query.json \
  --searchBody '{&quot;query&quot;:{&quot;term&quot;:{&quot;username&quot;: &quot;admin&quot;}}}'

恢复数据
# 将备份文件的数据导入ES
elasticdump \
  --input=./data.json \
  --output=http://localhost:9200 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同一台设备配置github和gitlab]]></title>
        <id>https://yanjielk.github.io/post/github-lab/</id>
        <link href="https://yanjielk.github.io/post/github-lab/">
        </link>
        <updated>2020-04-24T02:36:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-生成ssh秘钥">一. 生成ssh秘钥</h3>
<p>分别对github和gitlab生成对应秘钥(默认情况下生产秘钥位于当前用户 .ssh目录内)<br>
1.在gitbash中使用ssh-keygen -t rsa -C &quot;公司邮箱地址&quot; -f ~/.ssh/gitlab_rsa 生成对应的gitlab密钥：gitlab_rsa和gitlab_rsa.pub<br>
2.将gitlab公钥即gitlab_rsa.pub中的内容配置到公司的gitlab上<br>
3.在gitbash中使用ssh-keygen -t rsa -C &quot;github地址&quot; -f ~/.ssh/github_rsa生成对应的github密钥：github_rsa和github_rsa.pub<br>
4.将github公钥即github_rsa.pub中的内容配置到自己的github上<br>
5.进入密钥生成的位置(.ssh目录下)，创建一个config文件，添加配置：</p>
<pre><code># gitlab
Host gitlab
    HostName gitlabIP地址
    User git
    IdentityFile ~/.ssh/gitlab_rsa
# githab
Host github
    HostName github.com
    User git
    IdentityFile ~/.ssh/github_rsa
</code></pre>
<h3 id="二-测试连接">二. 测试连接</h3>
<pre><code>在gitbash命令行执行:
$ ssh -**T** git**@gitlab** 
**Welcome** to **GitLab**, yanjielk!

$ ssh -**T** git**@github**
**Hi** yanjielk! **You**'ve successfully authenticated, but **GitHub** does not provide shell access.
</code></pre>
<h3 id="三-配置git仓库">三. 配置git仓库</h3>
<p>git的config文件记录了用户的基本信息，需要配置在不同的本地仓库配置不同的用户信息来访问不同的远程仓库。config文件通常有三个位置：<br>
<strong>system(系统级别):</strong><br>
<strong>位于Windows下在git的安装目录， 包含了适用于系统所有用户和所有库的值。如果你传递参数选项’--system’ 给 git config，它将明确的读和写这个文件。</strong><br>
<strong>global(用户级别)</strong><br>
<strong>位于~/.gitconfig，具体到你的用户。你可以通过传递--global 选项使Git 读或写这个特定的文件。</strong><br>
<strong>local(仓库级别)</strong><br>
<strong>位于 .git/config，无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。</strong></p>
<h3 id="1-用户级别配置">1. 用户级别配置</h3>
<pre><code>因为公司的代码使用频率较高，所以我们将git配置文件的global（用户级别）设置为公司的gitlab账号,在gitlab中使用如下命令：
git config --global user.name 'yanjie' #公司账号名称
git config --global user.email 'yanjie@cecdat.com' #公司账号邮箱
</code></pre>
<h3 id="2-仓库级别配置">2. 仓库级别配置</h3>
<pre><code>将local（仓库级别）配置成github的账号。需要先init一个git的仓库并进入里面后执行如下命令：
git config --local user.name 'yanjie' #github账号名称
git config --local user.email 'yanjielk@gmail.com' #github账号邮箱
之后我们github的代码都在这个仓库下拉取。
</code></pre>
<h3 id="3-克隆代码">3. 克隆代码</h3>
<pre><code>$ git clone git@github.com:yanjielk/yanjielk.git
在使用github克隆代码时，因为配置了config, 所以会通过配置的host自动查找到git@github.com。对于gitlab也是相同的道理
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://yanjielk.github.io/post/hello-gridea/</id>
        <link href="https://yanjielk.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>