<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://yanjielk.github.io</id>
    <title>Yanjielk</title>
    <updated>2020-04-29T12:43:14.048Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://yanjielk.github.io"/>
    <link rel="self" href="https://yanjielk.github.io/atom.xml"/>
    <subtitle>XXXXXXXXXXXXXXXXX</subtitle>
    <logo>https://yanjielk.github.io/images/avatar.png</logo>
    <icon>https://yanjielk.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Yanjielk</rights>
    <entry>
        <title type="html"><![CDATA[Java8 全新的日期时间API实践]]></title>
        <id>https://yanjielk.github.io/post/java8-quan-xin-de-ri-qi-shi-jian-api-shi-jian/</id>
        <link href="https://yanjielk.github.io/post/java8-quan-xin-de-ri-qi-shi-jian-api-shi-jian/">
        </link>
        <updated>2020-04-29T12:11:00.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-simpledateformat">一、SimpleDateFormat</h3>
<p><strong>1.SimpleDateFormat线程不安全的</strong><br>
<strong>原因:</strong><br>
 如果把SimpleDateFormat定义成static成员变量，那么多个thread之间会共享这个sdf对象， 所以Calendar对象也会共享。<br>
 假定线程A和线程B都进入了parse(text, pos) 方法， 线程B执行到calendar.clear()后，线程A执行到calendar.getTime(), 那么就会有问题。</p>
<p><strong>解决:</strong><br>
 1.方法内部创建SimpleDateFormat将有线程安全的对象由共享变为私有局部变量都可以避免多线程问题，同时也加重了创建对象的负担。<br>
 2.将SimpleDateFormat进行同步使用，在每次执行时都对其加锁，这样也会影响性能，想要调用此方法的线程就需要block，当多线程并发量比较大时会对性能产生一定影响<br>
 总结：不同线程之间不共享相同的SimpleDateFormat，从而避免了线程安全问题</p>
<h3 id="二-javatime">二、java.time</h3>
<p> Java 8 推出了全新的日期时间API，新API基于ISO标准日历系统，java.time包下的所有类都是不可变类型而且线程安全。<br>
<strong>1.新时间日期API介绍</strong></p>
<ul>
<li>Instant: 时间戳</li>
<li>Duration: 持续时间，时间差</li>
<li>LocalDate: 只包含日期，如：2020-04-29</li>
<li>LocalTiome: 只包含时间：如：12:12:00</li>
<li>LocalDateTime: 包含时间和日期，如：2020-04-29 12:12:00</li>
<li>Period: 时间段</li>
<li>ZoneOffset: 时间偏移量，如：+8:00</li>
<li>ZooedDateTime: 带时区的时间</li>
<li>Clock: 时钟，比如获取目前美国纽约的时间</li>
<li>java.time.format.DateTimeFormatter: 时间格式化</li>
</ul>
<p><strong>2.实践</strong></p>
<ul>
<li><strong>获取当前日期(不包含时间)</strong></li>
</ul>
<pre><code>public class App {
    public static void main(String[] args) {
        LocalDate today = LocalDate.now(); // now(): 静态方法，根据当前时间创建对象
        System.out.println(&quot;当前时间：&quot;+today);
    }
}
/**
	运行结果：当前时间：2020-04-29
*/
</code></pre>
<ul>
<li><strong>处理特定日期</strong></li>
</ul>
<pre><code>public class App {
    public static void main(String[] args) {
        LocalDate date = LocalDate.of(2020,4,20);
        System.out.println(&quot;自定义时间：&quot;+date);
    }
}
/**
	运行结果：自定义时间：2020-04-20
*/
</code></pre>
<ul>
<li><strong>判断两个日期是否相等</strong></li>
</ul>
<pre><code>public class App {
    public static void main(String[] args) {
        LocalDate today = LocalDate.now();
        LocalDate date = LocalDate.of(2020,4,20);
        if (today.equals(date)){
            System.out.println(&quot;相等&quot;);
        }else {
            System.out.println(&quot;不相等&quot;);
        }
    }
}
</code></pre>
<ul>
<li><strong>获取当前时间(不包含日期)</strong></li>
</ul>
<pre><code>public class App {
    public static void main(String[] args) {
        LocalTime time = LocalTime.now();
        System.out.println(&quot;现在时间为:&quot;+time);
    }
}
/**
	运行结果：现在时间为:09:39:26.436
*/
</code></pre>
<ul>
<li><strong>获取当前时间(包含日期及时间)</strong></li>
</ul>
<pre><code>public class App {
    public static void main(String[] args) {
        LocalDateTime DateTime = LocalDateTime.now();
        System.out.println(&quot;当前时间为:&quot;+DateTime);
    }
}
/**
	运行结果：当前时间为:2020-04-29T09:44:31.199
*/
</code></pre>
<ul>
<li><strong>判断日期是早于还是晚于另一个日期</strong></li>
</ul>
<pre><code>public class App {
    public static void main(String[] args) {
        LocalDate date = LocalDate.now();
        LocalDate newDate = LocalDate.of(2020,3,6);
        if (newDate.isAfter(date)){
            System.out.println(&quot;在当前时间之后发生&quot;);
        }
        if (newDate.isBefore(date)){
            System.out.println(&quot;在当前时间之前发生&quot;);
        }
    }
}
</code></pre>
<ul>
<li><strong>两个日期之间的天数和月数</strong></li>
</ul>
<pre><code>public class App {
    public static void main(String[] args) {
        LocalDate date = LocalDate.now();
        LocalDate newDate = LocalDate.of(2020, 3, 6);
        Period period = Period.between(date, newDate);
        System.out.println(&quot;相差天数：&quot; + period.getDays());
        System.out.println(&quot;相差月数：&quot; + period.getMonths());
        System.out.println(&quot;相差年数：&quot; + period.getYears());
    }
}
/**
	运行结果：
			相差天数：-23
			相差月数：-1
			相差年数：0
*/
</code></pre>
<ul>
<li><strong>字符串互转日期类型</strong></li>
</ul>
<pre><code>public class App {
    public static void main(String[] args) {
        //日期类型转为字符串
        LocalDateTime localDateTime = LocalDateTime.of(2020,2,1,5,6);
        DateTimeFormatter dateTimeFormatter = DateTimeFormatter.ofPattern(&quot;yyyy/MM/dd HH:mm:ss&quot;);
        String str = localDateTime.format(dateTimeFormatter);
        System.out.println(&quot;日期类型转为字符串:&quot;+str);
        //字符串类型转为日期类型
        String time = &quot;2020/02/03 12:12:12&quot;;
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern(&quot;yyyy/MM/dd HH:mm:ss&quot;);
        LocalDateTime date = LocalDateTime.parse(time,formatter);
        System.out.println(&quot;字符串类型转为日期类型:&quot;+date);
    }
}
/**
	运行结果：
			日期类型转为字符串:2020/02/01 05:06:00
			字符串类型转为日期类型:2020-02-03T12:12:12
*/
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[离线安装elasticdump及命令]]></title>
        <id>https://yanjielk.github.io/post/chi-xian-an-zhuang-elasticdump/</id>
        <link href="https://yanjielk.github.io/post/chi-xian-an-zhuang-elasticdump/">
        </link>
        <updated>2020-04-24T06:02:13.000Z</updated>
        <content type="html"><![CDATA[<h2 id="一离线安装elasticdump">一.离线安装elasticdump</h2>
<p>准备工作:<br>
下载压缩包: 链接: https://pan.baidu.com/s/1VD--fwspgUCJ_7n_kHNlzw 提取码: 3zsh</p>
<p>1.下载两个压缩包<br>
node-v10.16.0-linux-x64.tar.xz 存放到/opt 目录下<br>
npm-cache.tar 存放到/root 目录下<br>
2.在/opt目录下，解压node-v10.16.0-linux-x64.tar.xz包</p>
<pre><code>tar -xvf node-v10.16.0-linux-x64.tar.xz
</code></pre>
<p>3.配置环境变量</p>
<pre><code>vim /etc/profile
export NODE_HOME=/opt/node-v10.16.0-linux-x64
export PATH=$PATH:$NODE_HOME/bin

source /etc/profile
</code></pre>
<p>4.确认是否安装成功</p>
<pre><code>node -v  
npm -v
</code></pre>
<p>5.解压 npm-cache.tar的包</p>
<pre><code>cd /root
tar -xvf npm-cache.tar

ll -h 检查是否存在.npm目录
</code></pre>
<p>6.执行安装elasticdump命令</p>
<pre><code> cd /opt/node-v10.16.0-linux-x64/lib
 npm install --cache /root/.npm --optional --cache-min 99999999 --shrinkwrap false elasticdump
</code></pre>
<p>7.检查状态</p>
<pre><code>执行命令 
elasticdump --help
</code></pre>
<h3 id="二基础命令es数据迁移">二.基础命令(es数据迁移)</h3>
<h4 id="1-数据迁移">1. 数据迁移</h4>
<pre><code>input:配置es输出数据IP地址
output:配置es接收数据IP地址
数据迁移： 
'#拷贝analyzer分词
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=http://localhost1:9200/my_index \
  --type=analyzer

'#拷贝映射
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=http://localhost1:9200/my_index \
  --type=mapping
  
  '#拷贝数据
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=http://localhost1:9200/my_index \
  --type=data
</code></pre>
<h4 id="2-保存本地方法">2. 保存本地方法</h4>
<pre><code># 备份索引数据到文件里:
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=/data/my_index_mapping.json \
  --type=mapping
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=/data/my_index.json \
  --type=data

# 把一个查询结果备份到文件中
elasticdump \
  --input=http://localhost:9200/my_index \
  --output=query.json \
  --searchBody '{&quot;query&quot;:{&quot;term&quot;:{&quot;username&quot;: &quot;admin&quot;}}}'

恢复数据
# 将备份文件的数据导入ES
elasticdump \
  --input=./data.json \
  --output=http://localhost:9200 
</code></pre>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[同一台设备配置github和gitlab]]></title>
        <id>https://yanjielk.github.io/post/github-lab/</id>
        <link href="https://yanjielk.github.io/post/github-lab/">
        </link>
        <updated>2020-04-24T02:36:46.000Z</updated>
        <content type="html"><![CDATA[<h3 id="一-生成ssh秘钥">一. 生成ssh秘钥</h3>
<p>分别对github和gitlab生成对应秘钥(默认情况下生产秘钥位于当前用户 .ssh目录内)<br>
1.在gitbash中使用ssh-keygen -t rsa -C &quot;公司邮箱地址&quot; -f ~/.ssh/gitlab_rsa 生成对应的gitlab密钥：gitlab_rsa和gitlab_rsa.pub<br>
2.将gitlab公钥即gitlab_rsa.pub中的内容配置到公司的gitlab上<br>
3.在gitbash中使用ssh-keygen -t rsa -C &quot;github地址&quot; -f ~/.ssh/github_rsa生成对应的github密钥：github_rsa和github_rsa.pub<br>
4.将github公钥即github_rsa.pub中的内容配置到自己的github上<br>
5.进入密钥生成的位置(.ssh目录下)，创建一个config文件，添加配置：</p>
<pre><code># gitlab
Host gitlab
    HostName gitlabIP地址
    User git
    IdentityFile ~/.ssh/gitlab_rsa
# github
Host github
    HostName github.com
    User git
    IdentityFile ~/.ssh/github_rsa
</code></pre>
<h3 id="二-测试连接">二. 测试连接</h3>
<pre><code>在gitbash命令行执行:
$ ssh -T git@gitlab
**Welcome** to **GitLab**, yanjielk!

$ ssh -T git@github
**Hi** yanjielk! **You**'ve successfully authenticated, but **GitHub** does not provide shell access.
</code></pre>
<h3 id="三-配置git仓库">三. 配置git仓库</h3>
<p>git的config文件记录了用户的基本信息，需要配置在不同的本地仓库配置不同的用户信息来访问不同的远程仓库。config文件通常有三个位置：<br>
<strong>system(系统级别):</strong><br>
<strong>位于Windows下在git的安装目录， 包含了适用于系统所有用户和所有库的值。如果你传递参数选项’--system’ 给 git config，它将明确的读和写这个文件。</strong><br>
<strong>global(用户级别)</strong><br>
<strong>位于~/.gitconfig，具体到你的用户。你可以通过传递--global 选项使Git 读或写这个特定的文件。</strong><br>
<strong>local(仓库级别)</strong><br>
<strong>位于 .git/config，无论你当前在用的库是什么，特定指向该单一的库。每个级别重写前一个级别的值。</strong></p>
<h3 id="1-用户级别配置">1. 用户级别配置</h3>
<pre><code>因为公司的代码使用频率较高，所以我们将git配置文件的global（用户级别）设置为公司的gitlab账号,在gitlab中使用如下命令：
git config --global user.name 'yanjie' #公司账号名称
git config --global user.email 'yanjie@cecdat.com' #公司账号邮箱
</code></pre>
<h3 id="2-仓库级别配置">2. 仓库级别配置</h3>
<pre><code>将local（仓库级别）配置成github的账号。需要先init一个git的仓库并进入里面后执行如下命令：
git config --local user.name 'yanjie' #github账号名称
git config --local user.email 'yanjielk@gmail.com' #github账号邮箱
之后我们github的代码都在这个仓库下拉取。
</code></pre>
<h3 id="3-克隆代码">3. 克隆代码</h3>
<pre><code>$ git clone git@github.com:yanjielk/yanjielk.git
在使用github克隆代码时，因为配置了config, 所以会通过配置的host自动查找到git@github.com。对于gitlab也是相同的道理
</code></pre>
]]></content>
    </entry>
</feed>